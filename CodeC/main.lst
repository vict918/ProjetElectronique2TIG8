CCS PCH C Compiler, Version 5.008, 5967               02-mai-20 16:04

               Filename:   C:\Users\robin\Documents\GitHub\ProjetElectronique2TIG8\CodeC\main.lst

               ROM used:   988 bytes (3%)
                           Largest free fragment is 31780
               RAM used:   8 (1%) at main() level
                           29 (2%) worst case
               Stack used: 2 locations
               Stack size: 31

*
0000:  GOTO   02CE
.................... #include <main.h> 
.................... #include <18F458.h> 
.................... //////// Standard Header file for the PIC18F458 device //////////////// 
.................... #device PIC18F458 
*
002A:  MOVLW  8E
002C:  MOVWF  00
002E:  MOVFF  14,01
0032:  MOVFF  13,02
0036:  CLRF   03
0038:  MOVF   01,F
003A:  BNZ   004E
003C:  MOVFF  02,01
0040:  CLRF   02
0042:  MOVLW  08
0044:  SUBWF  00,F
0046:  MOVF   01,F
0048:  BNZ   004E
004A:  CLRF   00
004C:  BRA    005E
004E:  BCF    FD8.0
0050:  BTFSC  01.7
0052:  BRA    005C
0054:  RLCF   02,F
0056:  RLCF   01,F
0058:  DECF   00,F
005A:  BRA    004E
005C:  BCF    01.7
005E:  GOTO   01D8 (RETURN)
0062:  MOVF   13,W
0064:  BTFSC  FD8.2
0066:  BRA    014A
0068:  MOVWF  00
006A:  MOVF   17,W
006C:  BTFSC  FD8.2
006E:  BRA    014A
0070:  ADDWF  00,F
0072:  BNC   007C
0074:  MOVLW  81
0076:  ADDWF  00,F
0078:  BC    014A
007A:  BRA    0084
007C:  MOVLW  7F
007E:  SUBWF  00,F
0080:  BNC   014A
0082:  BZ    014A
0084:  MOVFF  14,1B
0088:  MOVF   18,W
008A:  XORWF  1B,F
008C:  BSF    14.7
008E:  BSF    18.7
0090:  MOVF   16,W
0092:  MULWF  1A
0094:  MOVFF  FF4,1D
0098:  MOVF   15,W
009A:  MULWF  19
009C:  MOVFF  FF4,03
00A0:  MOVFF  FF3,1C
00A4:  MULWF  1A
00A6:  MOVF   FF3,W
00A8:  ADDWF  1D,F
00AA:  MOVF   FF4,W
00AC:  ADDWFC 1C,F
00AE:  MOVLW  00
00B0:  ADDWFC 03,F
00B2:  MOVF   16,W
00B4:  MULWF  19
00B6:  MOVF   FF3,W
00B8:  ADDWF  1D,F
00BA:  MOVF   FF4,W
00BC:  ADDWFC 1C,F
00BE:  MOVLW  00
00C0:  CLRF   02
00C2:  ADDWFC 03,F
00C4:  ADDWFC 02,F
00C6:  MOVF   14,W
00C8:  MULWF  1A
00CA:  MOVF   FF3,W
00CC:  ADDWF  1C,F
00CE:  MOVF   FF4,W
00D0:  ADDWFC 03,F
00D2:  MOVLW  00
00D4:  ADDWFC 02,F
00D6:  MOVF   14,W
00D8:  MULWF  19
00DA:  MOVF   FF3,W
00DC:  ADDWF  03,F
00DE:  MOVF   FF4,W
00E0:  ADDWFC 02,F
00E2:  MOVLW  00
00E4:  CLRF   01
00E6:  ADDWFC 01,F
00E8:  MOVF   16,W
00EA:  MULWF  18
00EC:  MOVF   FF3,W
00EE:  ADDWF  1C,F
00F0:  MOVF   FF4,W
00F2:  ADDWFC 03,F
00F4:  MOVLW  00
00F6:  ADDWFC 02,F
00F8:  ADDWFC 01,F
00FA:  MOVF   15,W
00FC:  MULWF  18
00FE:  MOVF   FF3,W
0100:  ADDWF  03,F
0102:  MOVF   FF4,W
0104:  ADDWFC 02,F
0106:  MOVLW  00
0108:  ADDWFC 01,F
010A:  MOVF   14,W
010C:  MULWF  18
010E:  MOVF   FF3,W
0110:  ADDWF  02,F
0112:  MOVF   FF4,W
0114:  ADDWFC 01,F
0116:  INCF   00,F
0118:  BTFSC  01.7
011A:  BRA    0126
011C:  RLCF   1C,F
011E:  RLCF   03,F
0120:  RLCF   02,F
0122:  RLCF   01,F
0124:  DECF   00,F
0126:  MOVLW  00
0128:  BTFSS  1C.7
012A:  BRA    0140
012C:  INCF   03,F
012E:  ADDWFC 02,F
0130:  ADDWFC 01,F
0132:  MOVF   01,W
0134:  BNZ   0140
0136:  MOVF   02,W
0138:  BNZ   0140
013A:  MOVF   03,W
013C:  BNZ   0140
013E:  INCF   00,F
0140:  BTFSC  1B.7
0142:  BSF    01.7
0144:  BTFSS  1B.7
0146:  BCF    01.7
0148:  BRA    0152
014A:  CLRF   00
014C:  CLRF   01
014E:  CLRF   02
0150:  CLRF   03
0152:  GOTO   020A (RETURN)
0156:  MOVF   13,W
0158:  SUBLW  B6
015A:  MOVWF  13
015C:  CLRF   03
015E:  MOVFF  14,17
0162:  BSF    14.7
0164:  BCF    FD8.0
0166:  RRCF   14,F
0168:  RRCF   15,F
016A:  RRCF   16,F
016C:  RRCF   03,F
016E:  RRCF   02,F
0170:  RRCF   01,F
0172:  RRCF   00,F
0174:  DECFSZ 13,F
0176:  BRA    0164
0178:  BTFSS  17.7
017A:  BRA    0192
017C:  COMF   00,F
017E:  COMF   01,F
0180:  COMF   02,F
0182:  COMF   03,F
0184:  INCF   00,F
0186:  BTFSC  FD8.2
0188:  INCF   01,F
018A:  BTFSC  FD8.2
018C:  INCF   02,F
018E:  BTFSC  FD8.2
0190:  INCF   03,F
0192:  GOTO   021C (RETURN)
*
0240:  BTFSC  FD8.1
0242:  BRA    024A
0244:  CLRF   FEA
0246:  MOVLW  17
0248:  MOVWF  FE9
024A:  CLRF   00
024C:  CLRF   01
024E:  CLRF   02
0250:  CLRF   03
0252:  CLRF   17
0254:  CLRF   18
0256:  CLRF   19
0258:  CLRF   1A
025A:  MOVF   16,W
025C:  IORWF  15,W
025E:  IORWF  14,W
0260:  IORWF  13,W
0262:  BZ    02BC
0264:  MOVLW  20
0266:  MOVWF  1B
0268:  BCF    FD8.0
026A:  RLCF   0F,F
026C:  RLCF   10,F
026E:  RLCF   11,F
0270:  RLCF   12,F
0272:  RLCF   17,F
0274:  RLCF   18,F
0276:  RLCF   19,F
0278:  RLCF   1A,F
027A:  MOVF   16,W
027C:  SUBWF  1A,W
027E:  BNZ   0290
0280:  MOVF   15,W
0282:  SUBWF  19,W
0284:  BNZ   0290
0286:  MOVF   14,W
0288:  SUBWF  18,W
028A:  BNZ   0290
028C:  MOVF   13,W
028E:  SUBWF  17,W
0290:  BNC   02B0
0292:  MOVF   13,W
0294:  SUBWF  17,F
0296:  MOVF   14,W
0298:  BTFSS  FD8.0
029A:  INCFSZ 14,W
029C:  SUBWF  18,F
029E:  MOVF   15,W
02A0:  BTFSS  FD8.0
02A2:  INCFSZ 15,W
02A4:  SUBWF  19,F
02A6:  MOVF   16,W
02A8:  BTFSS  FD8.0
02AA:  INCFSZ 16,W
02AC:  SUBWF  1A,F
02AE:  BSF    FD8.0
02B0:  RLCF   00,F
02B2:  RLCF   01,F
02B4:  RLCF   02,F
02B6:  RLCF   03,F
02B8:  DECFSZ 1B,F
02BA:  BRA    0268
02BC:  MOVFF  17,FEF
02C0:  MOVFF  18,FEC
02C4:  MOVFF  19,FEC
02C8:  MOVFF  1A,FEC
02CC:  RETURN 0
....................  
.................... #list 
....................  
.................... #device adc=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES RC_IO                    //Resistor/Capacitor Osc 
.................... #FUSES NOOSCSEN                 //Oscillator switching is disabled, main oscillator is source 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... //#FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
....................  
.................... #use delay(clock=20000000) 
*
0004:  CLRF   FEA
0006:  MOVLW  0C
0008:  MOVWF  FE9
000A:  MOVF   FEF,W
000C:  BZ    0028
000E:  MOVLW  06
0010:  MOVWF  01
0012:  CLRF   00
0014:  DECFSZ 00,F
0016:  BRA    0014
0018:  DECFSZ 01,F
001A:  BRA    0012
001C:  MOVLW  7B
001E:  MOVWF  00
0020:  DECFSZ 00,F
0022:  BRA    0020
0024:  DECFSZ FEF,F
0026:  BRA    000E
0028:  RETURN 0
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,restart_wdt) 
....................  
....................  
....................  
.................... int32 lecture(void); 
.................... int32 dist(void); 
.................... //int32 limite = 10; 
.................... //#INT_RDA 
.................... /* 
.................... void RDA_isr(void){ 
.................... limite = lecture(); 
.................... } 
.................... */ 
.................... void main(){ 
*
02CE:  CLRF   FF8
02D0:  BCF    FD0.7
02D2:  MOVLW  81
02D4:  MOVWF  FAF
02D6:  MOVLW  A6
02D8:  MOVWF  FAC
02DA:  MOVLW  90
02DC:  MOVWF  FAB
02DE:  BSF    FC1.0
02E0:  BSF    FC1.1
02E2:  BSF    FC1.2
02E4:  BCF    FC1.3
02E6:  MOVLW  07
02E8:  MOVWF  FB4
....................    output_high(PIN_B0); 
02EA:  BCF    F93.0
02EC:  BSF    F8A.0
....................    output_high(PIN_B1); 
02EE:  BCF    F93.1
02F0:  BSF    F8A.1
....................    //#define toint(c) ((c & 0x5F) > '9' ? c - '7' : c - '0') //conversion d'un char en int (0,9) 
....................    setup_timer_0(RTCC_INTERNAL); // 409us (us = microseconde) overflow 
02F2:  MOVLW  80
02F4:  MOVWF  FD5
....................    setup_timer_1(T1_INTERNAL); //13,1 ms overflow 
02F6:  MOVLW  85
02F8:  MOVWF  FCD
....................    enable_interrupts(GLOBAL); 
02FA:  MOVLW  C0
02FC:  IORWF  FF2,F
....................    setup_low_volt_detect(FALSE); 
02FE:  CLRF   FD2
....................    enable_interrupts(INT_RDA); 
0300:  BSF    F9D.5
....................    enable_interrupts(GLOBAL); 
0302:  IORWF  FF2,F
....................    delay_ms(100); //délai initialisation 
0304:  MOVLW  64
0306:  MOVWF  0C
0308:  RCALL  0004
....................    output_low(PIN_B0); 
030A:  BCF    F93.0
030C:  BCF    F8A.0
....................    output_low(PIN_B1); 
030E:  BCF    F93.1
0310:  BCF    F8A.1
....................    int32 distance=0; 
0312:  CLRF   08
0314:  CLRF   07
0316:  CLRF   06
0318:  CLRF   05
....................    while(true){ 
....................       distance = dist(); //calcul de la distance 
031A:  BRA    0196
031C:  MOVFF  03,08
0320:  MOVFF  02,07
0324:  MOVFF  01,06
0328:  MOVFF  00,05
....................        
....................       /* 
....................       if(distance<limite){ //si la distance est assez grande 
....................          output_low(PIN_B0); //si la sortie est basse led rouge 
....................          output_high(PIN_B1); //si la sortie est haute led verte 
....................       }else{ 
....................          output_low(PIN_B1); //vérifie que la led verte est bien éteinte 
....................          output_toggle(PIN_B0); //la led rouge clignote 
....................       } 
....................       */ 
....................        
....................        
....................        
....................       if(distance <= 153){ //154(base 16) == 100(base 10) 
032C:  MOVF   08,F
032E:  BNZ   0358
0330:  MOVF   07,F
0332:  BNZ   0358
0334:  MOVF   06,F
0336:  BNZ   0358
0338:  MOVF   05,W
033A:  SUBLW  99
033C:  BNC   0358
....................          output_low(PIN_E0); 
033E:  BCF    F96.0
0340:  BCF    F8D.0
....................          output_d(distance); 
0342:  CLRF   F95
0344:  MOVFF  05,F8C
....................          delay_ms(300); 
0348:  MOVLW  02
034A:  MOVWF  0B
034C:  MOVLW  96
034E:  MOVWF  0C
0350:  RCALL  0004
0352:  DECFSZ 0B,F
0354:  BRA    034C
....................  
....................          /* 
....................          while(test%10 != 0){ 
....................             output_d((test)); 
....................             test --; 
....................             if(32%10 == 0){ output_d(0x99); } 
....................              
....................             delay_ms(400); 
....................          } 
....................          */ 
....................          //output_d((hexadecimal)); 
....................       }else{ 
0356:  BRA    03D8
....................          output_high(PIN_E0); //dist = 155 
0358:  BCF    F96.0
035A:  BSF    F8D.0
....................          int diz = distance/100; //1.55 
....................          int unit = (distance - (diz*100))/10; 
035C:  BCF    FD8.1
035E:  MOVFF  08,12
0362:  MOVFF  07,11
0366:  MOVFF  06,10
036A:  MOVFF  05,0F
036E:  CLRF   16
0370:  CLRF   15
0372:  CLRF   14
0374:  MOVLW  64
0376:  MOVWF  13
0378:  RCALL  0240
037A:  MOVFF  00,09
037E:  MOVF   09,W
0380:  MULLW  64
0382:  MOVF   FF3,W
0384:  SUBWF  05,W
0386:  MOVWF  0B
0388:  MOVLW  00
038A:  SUBWFB 06,W
038C:  MOVWF  0C
038E:  MOVLW  00
0390:  SUBWFB 07,W
0392:  MOVWF  0D
0394:  MOVLW  00
0396:  SUBWFB 08,W
0398:  MOVWF  0E
039A:  BCF    FD8.1
039C:  MOVWF  12
039E:  MOVFF  0D,11
03A2:  MOVFF  0C,10
03A6:  MOVFF  0B,0F
03AA:  CLRF   16
03AC:  CLRF   15
03AE:  CLRF   14
03B0:  MOVLW  0A
03B2:  MOVWF  13
03B4:  RCALL  0240
03B6:  MOVFF  00,0A
....................          output_d((diz<<4)+unit); 
03BA:  SWAPF  09,W
03BC:  MOVWF  00
03BE:  MOVLW  F0
03C0:  ANDWF  00,F
03C2:  MOVF   00,W
03C4:  ADDWF  0A,W
03C6:  CLRF   F95
03C8:  MOVWF  F8C
....................          delay_ms(300); 
03CA:  MOVLW  02
03CC:  MOVWF  0B
03CE:  MOVLW  96
03D0:  MOVWF  0C
03D2:  RCALL  0004
03D4:  DECFSZ 0B,F
03D6:  BRA    03CE
....................       } 
03D8:  BRA    031A
....................        
....................        
....................     //printf("%lu\r\n",distance); //envoi du chiffre par le port Comm 
....................        
....................    } 
.................... } 
.................... /* 
03DA:  SLEEP 
.................... int32 lecture(){ 
....................    char entre[5]; //buffer de cinq caractères 
....................    int32 sorti=0; 
....................    int i=0,x=0,y=1; //sorti=int voulu 
....................    gets(entre); //attend une chaîne de caractères finie par CR carriage return 
....................    for(x=0;x<5;x++){ //boucle lisant le buffer 
....................       if(entre[x]=='\r'){break;} //quand le char == \r => fin du int 
....................    } 
....................    for(i=x-1;i>0;i--){ //boucle traduisant les char en un int 
....................       sorti+=toint(entre[i])*y; //la variable sorti est incrémentée du int* dizaine /centaine 
....................       y*=10; 
....................    } 
....................    sorti+=toint(entre[0])*y; //la boucle ne veut pas se finir à zéro alors voilà :'( 
....................    return sorti; 
....................    } 
....................    */ 
.................... int32 dist(){ 
*
0196:  CLRF   0E
0198:  CLRF   0D
019A:  CLRF   0C
019C:  CLRF   0B
019E:  CLRF   12
01A0:  CLRF   11
01A2:  CLRF   10
01A4:  CLRF   0F
....................    float time=0; 
....................    int32 distance=0; 
....................    output_high(pin_b7); //début de limpulsion sur le trigger de la sonde à ultrasons 
01A6:  BCF    F93.7
01A8:  BSF    F8A.7
....................     
....................    delay_us(20); 
01AA:  MOVLW  20
01AC:  MOVWF  00
01AE:  DECFSZ 00,F
01B0:  BRA    01AE
01B2:  BRA    01B4
01B4:  NOP   
....................    //delay_ms(10); 
....................    output_low(pin_b7); //fin de limpulsion 
01B6:  BCF    F93.7
01B8:  BCF    F8A.7
....................    while(!input(PIN_b3)); //tant que la pin b3/canrx du PIC est à low => reliée au echo de la sonde 
01BA:  BSF    F93.3
01BC:  BTFSS  F81.3
01BE:  BRA    01BA
....................       set_timer1(0); //mise à zéro du timer 1 
01C0:  CLRF   FCF
01C2:  CLRF   FCE
....................    while(input(PIN_b3)); //tant que la pin b3/canrx du PIC est à high 
01C4:  BSF    F93.3
01C6:  BTFSC  F81.3
01C8:  BRA    01C4
....................       time=get_timer1(); //récupération du timer 
01CA:  MOVF   FCE,W
01CC:  MOVFF  FCF,03
01D0:  MOVWF  13
01D2:  MOVFF  FCF,14
01D6:  BRA    002A
01D8:  MOVFF  03,0E
01DC:  MOVFF  02,0D
01E0:  MOVFF  01,0C
01E4:  MOVFF  00,0B
....................    distance = time*0.00344; //calcul de la distance 
01E8:  MOVFF  0E,16
01EC:  MOVFF  0D,15
01F0:  MOVFF  0C,14
01F4:  MOVFF  0B,13
01F8:  MOVLW  9F
01FA:  MOVWF  1A
01FC:  MOVLW  71
01FE:  MOVWF  19
0200:  MOVLW  61
0202:  MOVWF  18
0204:  MOVLW  76
0206:  MOVWF  17
0208:  BRA    0062
020A:  MOVFF  03,16
020E:  MOVFF  02,15
0212:  MOVFF  01,14
0216:  MOVFF  00,13
021A:  BRA    0156
021C:  MOVFF  03,12
0220:  MOVFF  02,11
0224:  MOVFF  01,10
0228:  MOVFF  00,0F
....................    //distance = time*340/10000.0 
....................    return distance; 
022C:  MOVFF  0F,00
0230:  MOVFF  10,01
0234:  MOVFF  11,02
0238:  MOVFF  12,03
023C:  GOTO   031C (RETURN)
....................    } 

Configuration Fuses:
   Word  1: 2700   RC_IO NOOSCSEN
   Word  2: 0E0D   NOPUT NOBROWNOUT BORV25 NOWDT WDT128
   Word  3: 0000  
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
