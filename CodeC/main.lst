CCS PCH C Compiler, Version 5.008, 5967               30-avr.-20 17:04

               Filename:   C:\Users\robin\Documents\GitHub\ProjetElectronique2TIG8\CodeC\main.lst

               ROM used:   874 bytes (3%)
                           Largest free fragment is 31890
               RAM used:   24 (2%) at main() level
                           69 (4%) worst case
               Stack used: 2 locations
               Stack size: 31

*
0000:  GOTO   02CA
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.5
004A:  GOTO   0054
004E:  BTFSC  F9E.5
0050:  GOTO   02CA
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include <main.h> 
.................... #include <18F458.h> 
.................... //////// Standard Header file for the PIC18F458 device //////////////// 
.................... #device PIC18F458 
*
00BC:  MOVLW  8E
00BE:  MOVWF  00
00C0:  MOVFF  3B,01
00C4:  MOVFF  3A,02
00C8:  CLRF   03
00CA:  MOVF   01,F
00CC:  BNZ   00E0
00CE:  MOVFF  02,01
00D2:  CLRF   02
00D4:  MOVLW  08
00D6:  SUBWF  00,F
00D8:  MOVF   01,F
00DA:  BNZ   00E0
00DC:  CLRF   00
00DE:  BRA    00F0
00E0:  BCF    FD8.0
00E2:  BTFSC  01.7
00E4:  BRA    00EE
00E6:  RLCF   02,F
00E8:  RLCF   01,F
00EA:  DECF   00,F
00EC:  BRA    00E0
00EE:  BCF    01.7
00F0:  RETURN 0
00F2:  MOVF   3A,W
00F4:  BTFSC  FD8.2
00F6:  BRA    01DA
00F8:  MOVWF  00
00FA:  MOVF   3E,W
00FC:  BTFSC  FD8.2
00FE:  BRA    01DA
0100:  ADDWF  00,F
0102:  BNC   010C
0104:  MOVLW  81
0106:  ADDWF  00,F
0108:  BC    01DA
010A:  BRA    0114
010C:  MOVLW  7F
010E:  SUBWF  00,F
0110:  BNC   01DA
0112:  BZ    01DA
0114:  MOVFF  3B,42
0118:  MOVF   3F,W
011A:  XORWF  42,F
011C:  BSF    3B.7
011E:  BSF    3F.7
0120:  MOVF   3D,W
0122:  MULWF  41
0124:  MOVFF  FF4,44
0128:  MOVF   3C,W
012A:  MULWF  40
012C:  MOVFF  FF4,03
0130:  MOVFF  FF3,43
0134:  MULWF  41
0136:  MOVF   FF3,W
0138:  ADDWF  44,F
013A:  MOVF   FF4,W
013C:  ADDWFC 43,F
013E:  MOVLW  00
0140:  ADDWFC 03,F
0142:  MOVF   3D,W
0144:  MULWF  40
0146:  MOVF   FF3,W
0148:  ADDWF  44,F
014A:  MOVF   FF4,W
014C:  ADDWFC 43,F
014E:  MOVLW  00
0150:  CLRF   02
0152:  ADDWFC 03,F
0154:  ADDWFC 02,F
0156:  MOVF   3B,W
0158:  MULWF  41
015A:  MOVF   FF3,W
015C:  ADDWF  43,F
015E:  MOVF   FF4,W
0160:  ADDWFC 03,F
0162:  MOVLW  00
0164:  ADDWFC 02,F
0166:  MOVF   3B,W
0168:  MULWF  40
016A:  MOVF   FF3,W
016C:  ADDWF  03,F
016E:  MOVF   FF4,W
0170:  ADDWFC 02,F
0172:  MOVLW  00
0174:  CLRF   01
0176:  ADDWFC 01,F
0178:  MOVF   3D,W
017A:  MULWF  3F
017C:  MOVF   FF3,W
017E:  ADDWF  43,F
0180:  MOVF   FF4,W
0182:  ADDWFC 03,F
0184:  MOVLW  00
0186:  ADDWFC 02,F
0188:  ADDWFC 01,F
018A:  MOVF   3C,W
018C:  MULWF  3F
018E:  MOVF   FF3,W
0190:  ADDWF  03,F
0192:  MOVF   FF4,W
0194:  ADDWFC 02,F
0196:  MOVLW  00
0198:  ADDWFC 01,F
019A:  MOVF   3B,W
019C:  MULWF  3F
019E:  MOVF   FF3,W
01A0:  ADDWF  02,F
01A2:  MOVF   FF4,W
01A4:  ADDWFC 01,F
01A6:  INCF   00,F
01A8:  BTFSC  01.7
01AA:  BRA    01B6
01AC:  RLCF   43,F
01AE:  RLCF   03,F
01B0:  RLCF   02,F
01B2:  RLCF   01,F
01B4:  DECF   00,F
01B6:  MOVLW  00
01B8:  BTFSS  43.7
01BA:  BRA    01D0
01BC:  INCF   03,F
01BE:  ADDWFC 02,F
01C0:  ADDWFC 01,F
01C2:  MOVF   01,W
01C4:  BNZ   01D0
01C6:  MOVF   02,W
01C8:  BNZ   01D0
01CA:  MOVF   03,W
01CC:  BNZ   01D0
01CE:  INCF   00,F
01D0:  BTFSC  42.7
01D2:  BSF    01.7
01D4:  BTFSS  42.7
01D6:  BCF    01.7
01D8:  BRA    01E2
01DA:  CLRF   00
01DC:  CLRF   01
01DE:  CLRF   02
01E0:  CLRF   03
01E2:  RETURN 0
01E4:  MOVF   3A,W
01E6:  SUBLW  B6
01E8:  MOVWF  3A
01EA:  CLRF   03
01EC:  MOVFF  3B,3E
01F0:  BSF    3B.7
01F2:  BCF    FD8.0
01F4:  RRCF   3B,F
01F6:  RRCF   3C,F
01F8:  RRCF   3D,F
01FA:  RRCF   03,F
01FC:  RRCF   02,F
01FE:  RRCF   01,F
0200:  RRCF   00,F
0202:  DECFSZ 3A,F
0204:  BRA    01F2
0206:  BTFSS  3E.7
0208:  BRA    0220
020A:  COMF   00,F
020C:  COMF   01,F
020E:  COMF   02,F
0210:  COMF   03,F
0212:  INCF   00,F
0214:  BTFSC  FD8.2
0216:  INCF   01,F
0218:  BTFSC  FD8.2
021A:  INCF   02,F
021C:  BTFSC  FD8.2
021E:  INCF   03,F
0220:  RETURN 0
....................  
.................... #list 
....................  
.................... #device adc=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES RC_IO                    //Resistor/Capacitor Osc 
.................... #FUSES NOOSCSEN                 //Oscillator switching is disabled, main oscillator is source 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... //#FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
....................  
.................... #use delay(clock=20000000) 
*
0096:  CLRF   FEA
0098:  MOVLW  33
009A:  MOVWF  FE9
009C:  MOVF   FEF,W
009E:  BZ    00BA
00A0:  MOVLW  06
00A2:  MOVWF  01
00A4:  CLRF   00
00A6:  DECFSZ 00,F
00A8:  BRA    00A6
00AA:  DECFSZ 01,F
00AC:  BRA    00A4
00AE:  MOVLW  7B
00B0:  MOVWF  00
00B2:  DECFSZ 00,F
00B4:  BRA    00B2
00B6:  DECFSZ FEF,F
00B8:  BRA    00A0
00BA:  RETURN 0
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,restart_wdt) 
....................  
....................  
....................  
....................  
.................... int32 lecture(void); 
.................... int32 dist(void); 
....................  
.................... #INT_RDA 
....................  
.................... void main(){ 
*
02CA:  CLRF   FF8
02CC:  BCF    FD0.7
02CE:  BSF    07.7
02D0:  MOVLW  81
02D2:  MOVWF  FAF
02D4:  MOVLW  A6
02D6:  MOVWF  FAC
02D8:  MOVLW  90
02DA:  MOVWF  FAB
02DC:  BSF    FC1.0
02DE:  BSF    FC1.1
02E0:  BSF    FC1.2
02E2:  BCF    FC1.3
02E4:  MOVLW  07
02E6:  MOVWF  FB4
....................    output_high(PIN_B0); 
02E8:  BCF    F93.0
02EA:  BSF    F8A.0
....................    output_high(PIN_B1); 
02EC:  BCF    F93.1
02EE:  BSF    F8A.1
....................     
....................    //#define toint(c) ((c & 0x5F) > '9' ? c - '7' : c - '0') //conversion d'un char en int (0,9) 
....................     
....................    setup_timer_0(RTCC_INTERNAL); // 409us (us = microseconde) overflow 
02F0:  MOVLW  80
02F2:  MOVWF  FD5
....................    setup_timer_1(T1_INTERNAL); //13,1 ms overflow 
02F4:  MOVLW  85
02F6:  MOVWF  FCD
....................    enable_interrupts(GLOBAL); 
02F8:  MOVLW  C0
02FA:  IORWF  FF2,F
....................    setup_low_volt_detect(FALSE); 
02FC:  CLRF   FD2
....................    enable_interrupts(INT_RDA); 
02FE:  BSF    F9D.5
....................    enable_interrupts(GLOBAL); 
0300:  IORWF  FF2,F
....................    delay_ms(100); //délai initialisation 
0302:  MOVLW  64
0304:  MOVWF  33
0306:  RCALL  0096
....................    output_low(PIN_B0); 
0308:  BCF    F93.0
030A:  BCF    F8A.0
....................    output_low(PIN_B1); 
030C:  BCF    F93.1
030E:  BCF    F8A.1
....................    int32 distance=0; 
0310:  CLRF   31
0312:  CLRF   30
0314:  CLRF   2F
0316:  CLRF   2E
....................     
....................    while(true){ 
....................       distance = dist(); //calcul de la distance 
0318:  RCALL  0222
031A:  MOVFF  03,31
031E:  MOVFF  02,30
0322:  MOVFF  01,2F
0326:  MOVFF  00,2E
....................       if(distance<100){ //si la distance est assez grande 
032A:  MOVF   31,F
032C:  BNZ   034A
032E:  MOVF   30,F
0330:  BNZ   034A
0332:  MOVF   2F,F
0334:  BNZ   034A
0336:  MOVF   2E,W
0338:  SUBLW  63
033A:  BNC   034A
....................          output_low(PIN_B0); //si la sortie est basse led rouge 
033C:  BCF    F93.0
033E:  BCF    F8A.0
....................          output_high(PIN_B1); //si la sortie est haute led verte 
0340:  BCF    F93.1
0342:  BSF    F8A.1
....................          output_low(PIN_E0); 
0344:  BCF    F96.0
0346:  BCF    F8D.0
....................       }else{ 
0348:  BRA    0356
....................          output_low(PIN_B1); //vérifie que la led verte est bien éteinte 
034A:  BCF    F93.1
034C:  BCF    F8A.1
....................          output_toggle(PIN_B0); //la led rouge clignote 
034E:  BCF    F93.0
0350:  BTG    F8A.0
....................          output_high(PIN_E0); 
0352:  BCF    F96.0
0354:  BSF    F8D.0
....................       } 
....................       output_d(distance); 
0356:  CLRF   F95
0358:  MOVFF  2E,F8C
....................        
....................       delay_ms(300); 
035C:  MOVLW  02
035E:  MOVWF  32
0360:  MOVLW  96
0362:  MOVWF  33
0364:  RCALL  0096
0366:  DECFSZ 32,F
0368:  BRA    0360
036A:  BRA    0318
....................    } 
.................... } 
....................  
036C:  SLEEP 
.................... int32 dist(){ 
*
0222:  CLRF   35
0224:  CLRF   34
0226:  CLRF   33
0228:  CLRF   32
022A:  CLRF   39
022C:  CLRF   38
022E:  CLRF   37
0230:  CLRF   36
....................    float time=0; 
....................    int32 distance=0; 
....................    output_high(pin_b7); //début de l’impulsion sur le trigger de la sonde à ultrasons 
0232:  BCF    F93.7
0234:  BSF    F8A.7
....................    delay_us(20);//20 
0236:  MOVLW  20
0238:  MOVWF  00
023A:  DECFSZ 00,F
023C:  BRA    023A
023E:  BRA    0240
0240:  NOP   
....................    output_low(pin_b7); //fin de l’impulsion 
0242:  BCF    F93.7
0244:  BCF    F8A.7
....................     
....................    while(!input(PIN_b3)); //tant que la pin b3/canrx du PIC est à low => reliée au echo de la sonde 
0246:  BSF    F93.3
0248:  BTFSS  F81.3
024A:  BRA    0246
....................    set_timer1(0); //mise à zéro du timer 1 
024C:  CLRF   FCF
024E:  CLRF   FCE
....................     
....................    while(input(PIN_b3)); //tant que la pin b3/canrx du PIC est à high 
0250:  BSF    F93.3
0252:  BTFSC  F81.3
0254:  BRA    0250
....................    time=get_timer1(); //récupération du timer 
0256:  MOVF   FCE,W
0258:  MOVFF  FCF,03
025C:  MOVWF  3A
025E:  MOVFF  FCF,3B
0262:  RCALL  00BC
0264:  MOVFF  03,35
0268:  MOVFF  02,34
026C:  MOVFF  01,33
0270:  MOVFF  00,32
....................    //distance = (time*340)/10000; 
....................    distance = time*0.00344; //calcul de la distance 
0274:  MOVFF  35,3D
0278:  MOVFF  34,3C
027C:  MOVFF  33,3B
0280:  MOVFF  32,3A
0284:  MOVLW  9F
0286:  MOVWF  41
0288:  MOVLW  71
028A:  MOVWF  40
028C:  MOVLW  61
028E:  MOVWF  3F
0290:  MOVLW  76
0292:  MOVWF  3E
0294:  RCALL  00F2
0296:  MOVFF  03,3D
029A:  MOVFF  02,3C
029E:  MOVFF  01,3B
02A2:  MOVFF  00,3A
02A6:  RCALL  01E4
02A8:  MOVFF  03,39
02AC:  MOVFF  02,38
02B0:  MOVFF  01,37
02B4:  MOVFF  00,36
....................    return distance; 
02B8:  MOVFF  36,00
02BC:  MOVFF  37,01
02C0:  MOVFF  38,02
02C4:  MOVFF  39,03
02C8:  RETURN 0
.................... } 
....................  

Configuration Fuses:
   Word  1: 2700   RC_IO NOOSCSEN
   Word  2: 0E0D   NOPUT NOBROWNOUT BORV25 NOWDT WDT128
   Word  3: 0000  
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
