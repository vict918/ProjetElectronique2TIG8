#include <main.h>

char buffer[4];
int i =0;
int16 diz, unit;
boolean flag =0;
int16 limitDist = 200;
int16 distance, time;

int d,c,u;
/*
#int_RDA
void RDA_ISR(void)
{  
   buffer[i] = getc();
   if(buffer[0] == ':' && flag == 0){
      i++;
      if(i>=4){
         i = 0;
         flag = 1;
      } 
   } 
}*/

void main()
{
   setup_adc_ports(NO_ANALOGS);
   setup_adc(ADC_OFF);
   setup_psp(PSP_DISABLED);
   setup_spi(FALSE);
   setup_wdt(WDT_OFF);
   setup_timer_0(RTCC_INTERNAL);
   setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);
   setup_timer_2(T2_DISABLED,0,1);
   setup_comparator(NC_NC_NC_NC);
   setup_vref(FALSE);
   enable_interrupts(INT_RDA);
   enable_interrupts(GLOBAL);
   setup_oscillator(FALSE);
   
   
   
   while(true){
      output_high(pin_B7);
      delay_us(20);
      output_low(pin_B7);
      
      while(!input(pin_B3));
      {}
      
      set_timer1(0);
      
       while(input(pin_B3));
      {}
      
      
      time = get_timer1();
      //distance = time/100;
      distance = time*0.00344;
     
      
      
      if(distance < limitDist){
         output_high(PIN_B1);
         output_low(PIN_B0);
         
      }else{
         output_low(PIN_B1);
         output_toggle(PIN_B0);
         
      }
   }
   
   if(distance < 100){
      output_low(PIN_E0);
      diz = distance/10;
      unit = distance - (diz*10);
      output_d(distance);
      //output_d((diz<<4)+unit);
   }
   else{
      output_high(PIN_E0);
      diz = distance/100;
      unit = (distance - (diz*100))/10;
      //output_d((diz<<4)+unit);
      output_d(distance);
   }
   /*
   if(flag == 1){
      flag = 0;
      c = buffer[1]-48;
      d = buffer[2]-48;
      u = buffer[3]-48;
      limitDist = (int16) (c*100+d*10+u);
   }
   
   c = limitDist/100;
   d = (limitDist-(c*100))/10;
   u = (limitDist-(c*100))-(d*10);
   */
}   
