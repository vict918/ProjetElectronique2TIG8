#include <main.h>

int32 lecture(void);
int32 limite = 70;
int seg [] = {0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,
               0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,
               0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,
               0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
               0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,
               0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,
               0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,
               0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,
               0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,
               0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99};

#INT_RDA
void RDA_isr(void){
   limite = lecture();
}


int32 valeurDist(){
   float temps=0;
   int32 dist=0;
   
   output_high(pin_b7); //début de l’impulsion sur le trigger de la sonde à ultrasons 
   delay_us(20); //delay_ms(10);
   output_low(pin_b7); //fin de l’impulsion
   
   while(!input(PIN_b3)); //tant que la pin b3/canrx du PIC est à low => reliée au echo de la sonde
      set_timer1(0); //mise à zéro du timer 1
      
   while(input(PIN_b3)); //tant que la pin b3/canrx du PIC est à high
      temps=get_timer1(); //récupération du timer
     
   
   dist = temps*0.00344; //calcul de la distance en cm
   //distance = time*340/10000.0
   return dist;
}



void main(){
   output_high(PIN_B0);
   output_high(PIN_B1);
   #define toint(c)  ((c) > '9' ? c - '7' : c - '0') //conversion d'un char en int (0,9)
   //setup_timer_0(RTCC_INTERNAL); // 409us (us = microseconde) overflow
   setup_timer_1(T1_INTERNAL); //13,1 ms overflow
   enable_interrupts(GLOBAL);
   setup_low_volt_detect(FALSE);
   enable_interrupts(INT_RDA);
   enable_interrupts(GLOBAL);
   delay_ms(100); //délai initialisation
   output_low(PIN_B0);
   output_low(PIN_B1);
   
   
   int32 distance=0;
   
   while(true){
   
      distance = valeurDist(); //calcul de la distance
      
      if(distance<limite){ //si la distance est assez grande
         output_low(PIN_B1); //si la sortie est basse led rouge
         output_high(PIN_B0); //si la sortie est haute led verte
      }else{
         output_low(PIN_B0); //vérifie que la led verte est bien éteinte
         output_toggle(PIN_B1); //la led rouge clignote
      }
      
      for(int i = 0; i < sizeof(seg); i++){
         output_d(seg[i]);
         delay_ms(100);
      }
      
         
      /*
      if(distance <= 153){
         if(distance <= 9){
            output_low(PIN_E0);
            output_d(distance);
            delay_ms(300);
         }
         
         output_low(PIN_E0);
         //output_d(distance);
         output_d(seg[0]);
         delay_ms(500);
         output_d(0x99);
         delay_ms(500);
         
         
         printf("%lu\r\n",distance);
         delay_ms(300);
         
      }else{
         output_high(PIN_E0); //dist = 155
         int diz = distance/100; //1.55
         int unit = (distance - (diz*100))/10;
         output_d((diz<<4)+unit);
         delay_ms(300);
      } 
      */
      
   }
}

int32 lecture(){
      char entre[5]; //buffer de cinq caractères
      int32 sorti=0;
      int i=0,x=0,y=1; //sorti=int voulu
      gets(entre); //attend une chaîne de caractères finie par CR carriage return
         for(x=0;x<5;x++){ //boucle lisant le buffer
            if(entre[x]=='\r'){break;} //quand le char == \r => fin du int
         }
         for(i=x-1;i>0;i--){ //boucle traduisant les char en un int
            sorti+=toint(entre[i])*y; //la variable sorti est incrémentée du int* dizaine /centaine
            y*=10;
         }
         sorti+=toint(entre[0])*y; //la boucle ne veut pas se finir à zéro alors voilà :'(
         return sorti;
}






