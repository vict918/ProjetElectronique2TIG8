d G "INT_CANRX0" 2 763 "0x00A301"
D G "__PCH__" 0 62 ""5.008""
D G "__DEVICE__" 0 62 "458"
D G "__DATE__" 0 62 ""30-avr.-20""
D G "__TIME__" 0 62 ""17:04:39"" "Standard Header file for the PIC18F458 device ////////////////"
c L "set_tris_a" 2 5 16 "FUNCTION"
v L "value" 2 31 "int8" `54 
f B "set_tris_a" 2 31 "void(int8 value)" `53 
v L "value" 2 32 "int8" `56 
f B "set_tris_b" 2 32 "void(int8 value)" `55 
v L "value" 2 33 "int8" `58 
f B "set_tris_c" 2 33 "void(int8 value)" `57 
v L "value" 2 34 "int8" `60 
f B "set_tris_d" 2 34 "void(int8 value)" `59 
v L "value" 2 35 "int8" `62 
f B "set_tris_e" 2 35 "void(int8 value)" `61 
f B "get_tris_a" 2 36 "int8()" `63 
f B "get_tris_b" 2 37 "int8()" `64 
f B "get_tris_c" 2 38 "int8()" `65 
f B "get_tris_d" 2 39 "int8()" `66 
f B "get_tris_e" 2 40 "int8()" `67 
v L "value" 2 41 "int8" `69 
f B "output_a" 2 41 "void(int8 value)" `68 
v L "value" 2 42 "int8" `71 
f B "output_b" 2 42 "void(int8 value)" `70 
v L "value" 2 43 "int8" `73 
f B "output_c" 2 43 "void(int8 value)" `72 
v L "value" 2 44 "int8" `75 
f B "output_d" 2 44 "void(int8 value)" `74 
v L "value" 2 45 "int8" `77 
f B "output_e" 2 45 "void(int8 value)" `76 
f B "input_a" 2 46 "int8()" `78 
f B "input_b" 2 47 "int8()" `79 
f B "input_c" 2 48 "int8()" `80 
f B "input_d" 2 49 "int8()" `81 
f B "input_e" 2 50 "int8()" `82 
f B "input_change_a" 2 51 "int8()" `83 
f B "input_change_b" 2 52 "int8()" `84 
f B "input_change_c" 2 53 "int8()" `85 
f B "input_change_d" 2 54 "int8()" `86 
f B "input_change_e" 2 55 "int8()" `87 
v L "pin" 2 56 "int16" `89 
f B "input" 2 56 "int8(int16 pin)" `88 
v L "pin" 2 57 "int16" `91 
f B "input_state" 2 57 "int8(int16 pin)" `90 
v L "pin" 2 58 "int16" `93 
f B "output_low" 2 58 "void(int16 pin)" `92 
v L "pin" 2 59 "int16" `95 
f B "output_high" 2 59 "void(int16 pin)" `94 
v L "pin" 2 60 "int16" `97 
f B "output_toggle" 2 60 "void(int16 pin)" `96 
v L "pin" 2 61 "int16" `99 
v L "level" 2 61 "int8" `100 
f B "output_bit" 2 61 "void(int16 pin,int8 level)" `98 
v L "pin" 2 62 "int16" `102 
f B "output_float" 2 62 "void(int16 pin)" `101 
v L "pin" 2 63 "int16" `104 
f B "output_drive" 2 63 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 67 "31744"
d G "PIN_A1" 2 68 "31745"
d G "PIN_A2" 2 69 "31746"
d G "PIN_A3" 2 70 "31747"
d G "PIN_A4" 2 71 "31748"
d G "PIN_A5" 2 72 "31749"
d G "PIN_A6" 2 73 "31750"
d G "PIN_B0" 2 75 "31752"
d G "PIN_B1" 2 76 "31753"
d G "PIN_B2" 2 77 "31754"
d G "PIN_B3" 2 78 "31755"
d G "PIN_B4" 2 79 "31756"
d G "PIN_B5" 2 80 "31757"
d G "PIN_B6" 2 81 "31758"
d G "PIN_B7" 2 82 "31759"
d G "PIN_C0" 2 84 "31760"
d G "PIN_C1" 2 85 "31761"
d G "PIN_C2" 2 86 "31762"
d G "PIN_C3" 2 87 "31763"
d G "PIN_C4" 2 88 "31764"
d G "PIN_C5" 2 89 "31765"
d G "PIN_C6" 2 90 "31766"
d G "PIN_C7" 2 91 "31767"
d G "PIN_D0" 2 93 "31768"
d G "PIN_D1" 2 94 "31769"
d G "PIN_D2" 2 95 "31770"
d G "PIN_D3" 2 96 "31771"
d G "PIN_D4" 2 97 "31772"
d G "PIN_D5" 2 98 "31773"
d G "PIN_D6" 2 99 "31774"
d G "PIN_D7" 2 100 "31775"
d G "PIN_E0" 2 102 "31776"
d G "PIN_E1" 2 103 "31777"
d G "PIN_E2" 2 104 "31778"
d G "FALSE" 2 107 "0"
d G "TRUE" 2 108 "1"
d G "BYTE" 2 110 "int8"
d G "BOOLEAN" 2 111 "int1"
d G "getc" 2 113 "getch"
d G "fgetc" 2 114 "getch"
d G "getchar" 2 115 "getch"
d G "putc" 2 116 "putchar"
d G "fputc" 2 117 "putchar"
d G "fgets" 2 118 "gets"
d G "fputs" 2 119 "puts"
c L "output_drive" 2 5 3 "FUNCTION"
f B "restart_cause" 2 124 "int8()" `105 
f B "reset_cpu" 2 125 "void()" `106 
f B "sleep" 2 126 "void()" `107  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 128 "7"
d G "MCLR_FROM_SLEEP" 2 129 "11"
d G "MCLR_FROM_RUN" 2 130 "15"
d G "NORMAL_POWER_UP" 2 131 "12"
d G "BROWNOUT_RESTART" 2 132 "14"
d G "WDT_FROM_SLEEP" 2 133 "3"
d G "RESET_INSTRUCTION" 2 134 "0"
c L "sleep" 2 5 5 "FUNCTION"
v L "mode" 2 141 "int8" `109 
f B "setup_timer_0" 2 141 "void(int8 mode)" `108 
v L "value" 2 142 "int16" `111 
f B "set_timer0" 2 142 "void(int16 value)" `110 
f B "get_timer0" 2 143 "int16()" `112 
v L "mode" 2 144 "int8" `114 
v L "prescaler" 2 144 "int8" `115 
f B "setup_counters" 2 144 "void(int8 mode,int8 prescaler)" `113 
v L "value" 2 145 "int16" `117 
f B "set_rtcc" 2 145 "void(int16 value)" `116 
f B "get_rtcc" 2 146 "int16()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 148 "0"
d G "T0_EXT_L_TO_H" 2 149 "32"
d G "T0_EXT_H_TO_L" 2 150 "48"
d G "T0_DIV_1" 2 152 "8"
d G "T0_DIV_2" 2 153 "0"
d G "T0_DIV_4" 2 154 "1"
d G "T0_DIV_8" 2 155 "2"
d G "T0_DIV_16" 2 156 "3"
d G "T0_DIV_32" 2 157 "4"
d G "T0_DIV_64" 2 158 "5"
d G "T0_DIV_128" 2 159 "6"
d G "T0_DIV_256" 2 160 "7"
d G "T0_OFF" 2 162 "0x80"
d G "T0_8_BIT" 2 164 "0x40"
d G "RTCC_INTERNAL" 2 166 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 167 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 168 "48"
d G "RTCC_DIV_1" 2 169 "8"
d G "RTCC_DIV_2" 2 170 "0"
d G "RTCC_DIV_4" 2 171 "1"
d G "RTCC_DIV_8" 2 172 "2"
d G "RTCC_DIV_16" 2 173 "3"
d G "RTCC_DIV_32" 2 174 "4"
d G "RTCC_DIV_64" 2 175 "5"
d G "RTCC_DIV_128" 2 176 "6"
d G "RTCC_DIV_256" 2 177 "7"
d G "RTCC_OFF" 2 178 "0x80"
d G "RTCC_8_BIT" 2 179 "0x40"
c L "get_rtcc" 2 5 8 "FUNCTION"
v L "mode" 2 190 "int16" `120 
f B "setup_wdt" 2 190 "void(int16 mode)" `119 
f B "restart_wdt" 2 191 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 193 "0x100"
d G "WDT_OFF" 2 194 "0"
d G "WDT_18MS" 2 196 "0x300"
d G "WDT_36MS" 2 197 "0x500"
d G "WDT_72MS" 2 198 "0x700"
d G "WDT_144MS" 2 199 "0x900"
d G "WDT_288MS" 2 200 "0xB00"
d G "WDT_576MS" 2 201 "0xD00"
d G "WDT_1152MS" 2 202 "0xF00"
d G "WDT_2304MS" 2 203 "0x1108"
c L "restart_wdt" 2 5 3 "FUNCTION"
v L "mode" 2 209 "int16" `123 
f B "setup_timer_1" 2 209 "void(int16 mode)" `122 
f B "get_timer1" 2 210 "int16()" `124 
v L "value" 2 211 "int16" `126 
f B "set_timer1" 2 211 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 214 "0"
d G "T1_INTERNAL" 2 215 "0x85"
d G "T1_EXTERNAL" 2 216 "0x87"
d G "T1_EXTERNAL_SYNC" 2 217 "0x83"
d G "T1_CLK_OUT" 2 219 "8"
d G "T1_DIV_BY_1" 2 221 "0"
d G "T1_DIV_BY_2" 2 222 "0x10"
d G "T1_DIV_BY_4" 2 223 "0x20"
d G "T1_DIV_BY_8" 2 224 "0x30"
c L "set_timer1" 2 5 3 "FUNCTION"
v L "mode" 2 229 "int8" `128 
v L "period" 2 229 "int8" `129 
v L "postscale" 2 229 "int8" `130 
f B "setup_timer_2" 2 229 "void(int8 mode,int8 period,int8 postscale)" `127 
f B "get_timer2" 2 230 "int8()" `131 
v L "value" 2 231 "int8" `133 
f B "set_timer2" 2 231 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 233 "0"
d G "T2_DIV_BY_1" 2 234 "4"
d G "T2_DIV_BY_4" 2 235 "5"
d G "T2_DIV_BY_16" 2 236 "6"
c L "set_timer2" 2 5 3 "FUNCTION"
v L "mode" 2 241 "int16" `135 
f B "setup_timer_3" 2 241 "void(int16 mode)" `134 
f B "get_timer3" 2 242 "int16()" `136 
v L "value" 2 243 "int16" `138 
f B "set_timer3" 2 243 "void(int16 value)" `137  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 246 "0"
d G "T3_INTERNAL" 2 247 "0x85"
d G "T3_EXTERNAL" 2 248 "0x87"
d G "T3_EXTERNAL_SYNC" 2 249 "0x83"
d G "T3_DIV_BY_1" 2 251 "0"
d G "T3_DIV_BY_2" 2 252 "0x10"
d G "T3_DIV_BY_4" 2 253 "0x20"
d G "T3_DIV_BY_8" 2 254 "0x30"
c L "set_timer3" 2 5 4 "FUNCTION"
v L "mode" 2 260 "int32" `140 
f B "setup_ccp1" 2 260 "void(int32 mode)" `139 
v L "mode" 2 261 "int32" `142 
v L "pwm" 2 261 "int8" `143 
f G "setup_ccp1" 2 261 "void(int32 mode,int8 pwm)" `141 
v L "value" 2 262 "int16" `145 
f B "set_pwm1_duty" 2 262 "void(int16 value)" `144  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 264 "0"
d G "CCP_CAPTURE_FE" 2 265 "4"
d G "CCP_CAPTURE_RE" 2 266 "5"
d G "CCP_CAPTURE_DIV_4" 2 267 "6"
d G "CCP_CAPTURE_DIV_16" 2 268 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 269 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 270 "9"
d G "CCP_COMPARE_INT" 2 271 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 272 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 2 273 "0xB"
d G "CCP_PWM" 2 274 "0xC"
d G "CCP_PWM_PLUS_1" 2 275 "0x1c"
d G "CCP_PWM_PLUS_2" 2 276 "0x2c"
d G "CCP_PWM_PLUS_3" 2 277 "0x3c"
c L "set_pwm1_duty" 2 5 1 "FUNCTION"
d G "T3_CCP1_TO_2" 2 283 "0x48"
d G "T3_CCP2" 2 284 "0x8"
d G "CCP_PWM_H_H" 2 287 "0x0c"
d G "CCP_PWM_H_L" 2 288 "0x0d"
d G "CCP_PWM_L_H" 2 289 "0x0e"
d G "CCP_PWM_L_L" 2 290 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 292 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 293 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 294 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 296 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 297 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 298 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 299 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 300 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 301 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 302 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 304 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 305 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 306 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 308 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 309 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 310 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 312 "0x80000000"
c L "set_pwm1_duty" 2 5 1 "FUNCTION"
v L "mode" 2 316 "int32" `150 
f B "setup_ccp2" 2 316 "void(int32 mode)" `149 
v L "mode" 2 317 "int32" `152 
v L "pwm" 2 317 "int8" `153 
f G "setup_ccp2" 2 317 "void(int32 mode,int8 pwm)" `151 
v L "value" 2 318 "int16" `155 
f B "set_pwm2_duty" 2 318 "void(int16 value)" `154 
c L "set_pwm2_duty" 2 5 5 "FUNCTION"
v L "mode" 2 327 "int8" `160 
f B "setup_psp" 2 327 "void(int8 mode)" `159 
f B "psp_output_full" 2 328 "int8()" `161 
f B "psp_input_full" 2 329 "int8()" `162 
f B "psp_overflow" 2 330 "int8()" `163  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 2 332 "0x10"
d G "PSP_DISABLED" 2 333 "0"
c L "psp_overflow" 2 5 3 "FUNCTION"
v L "mode" 2 340 "int32" `166 
f B "setup_spi" 2 340 "void(int32 mode)" `165 
v L "value" 2 341 "int8" `168 
f B "spi_write" 2 341 "void(int8 value)" `167 
f B "spi_read" 2 342 "int8()" `169 
v L "value" 2 343 "int8" `171 
f G "spi_read" 2 343 "int8(int8 value)" `170 
f B "spi_data_in" 2 344 "int8()" `172  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 346 "0x00"
d G "SPI_MASTER" 2 347 "0x20"
d G "SPI_SLAVE" 2 348 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 349 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 350 "0x00"
d G "SPI_CLK_DIV_4" 2 351 "0x00"
d G "SPI_CLK_DIV_16" 2 352 "0x01"
d G "SPI_CLK_DIV_64" 2 353 "0x02"
d G "SPI_CLK_T2" 2 354 "0x03"
d G "SPI_SS_DISABLED" 2 355 "0x01"
d G "SPI_XMIT_L_TO_H" 2 357 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 358 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 360 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 361 "0x8000"
d G "SPI_L_TO_H" 2 364 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 365 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 5 2 "FUNCTION"
v L "baud" 2 369 "int32" `174 
f B "setup_uart" 2 369 "void(int32 baud)" `173 
v L "baud" 2 370 "int32" `176 
v L "stream" 2 370 "int8" `177 
f G "setup_uart" 2 370 "void(int32 baud,int8 stream)" `175 
v L "baud" 2 371 "int32" `179 
v L "stream" 2 371 "int8" `180 
v L "clock" 2 371 "int32" `181 
f G "setup_uart" 2 371 "void(int32 baud,int8 stream,int32 clock)" `178 
v L "baud" 2 372 "int32" `183 
f B "set_uart_speed" 2 372 "void(int32 baud)" `182 
v L "baud" 2 373 "int32" `185 
v L "stream" 2 373 "int8" `186 
f G "set_uart_speed" 2 373 "void(int32 baud,int8 stream)" `184 
v L "baud" 2 374 "int32" `188 
v L "stream" 2 374 "int8" `189 
v L "clock" 2 374 "int32" `190 
f G "set_uart_speed" 2 374 "void(int32 baud,int8 stream,int32 clock)" `187  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 378 "2"
d G "UART_DATA" 2 379 "4"
c L "set_uart_speed" 2 5 3 "FUNCTION"
v L "mode" 2 383 "int32" `192 
f B "setup_comparator" 2 383 "void(int32 mode)" `191  "Constants used in setup_comparator() are:"
d G "D1_D0_D3_D0" 2 385 "0x0Bff04"
d G "D1_D0_D3_D2_OUT_ON_E1_E2" 2 386 "0x0FF903"
d G "D1_D0_D3_D0_OUT_ON_E1_E2" 2 387 "0x0BF905"
d G "NC_NC_NC_NC" 2 388 "0x00ff07"
d G "D1_D0_D3_D2" 2 389 "0x0Fff02"
d G "D1_D0_NC_NC_OUT_ON_E1" 2 390 "0x03FD01"
d G "D1_VR_D3_VR" 2 391 "0x0Aff06"
d G "D0_VR_D2_VR" 2 392 "0x05ff0e"
d G "CP1_INVERT" 2 393 "0x0000010"
d G "CP2_INVERT" 2 394 "0x0000020"
c L "setup_comparator" 2 5 2 "FUNCTION"
v L "mode" 2 401 "int8" `196 
f B "setup_vref" 2 401 "void(int8 mode)" `195  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 403 "0xa0"
d G "VREF_HIGH" 2 404 "0x80"
d G "VREF_F5" 2 406 "0x40"
d G "VREF_COMP" 2 407 "0x10"
c L "setup_vref" 2 5 2 "FUNCTION"
v L "mode" 2 411 "int8" `198 
f B "setup_low_volt_detect" 2 411 "void(int8 mode)" `197  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 413 "0x1F"
d G "LVD_45" 2 414 "0x1E"
d G "LVD_42" 2 415 "0x1D"
d G "LVD_40" 2 416 "0x1C"
d G "LVD_38" 2 417 "0x1B"
d G "LVD_36" 2 418 "0x1A"
d G "LVD_35" 2 419 "0x19"
d G "LVD_33" 2 420 "0x18"
d G "LVD_30" 2 421 "0x17"
d G "LVD_28" 2 422 "0x16"
d G "LVD_27" 2 423 "0x15"
d G "LVD_25" 2 424 "0x14"
d G "LVD_23" 2 425 "0x13"
d G "LVD_21" 2 426 "0x12"
d G "LVD_19" 2 427 "0x11"
c L "setup_low_volt_detect" 2 5 2 "FUNCTION"
v L "mode" 2 432 "int8" `200 
f B "setup_oscillator" 2 432 "void(int8 mode)" `199  "Constants used in setup_oscillator() are:"
d G "OSC_TIMER1" 2 434 "1"
d G "OSC_NORMAL" 2 435 "0"
c L "setup_oscillator" 2 5 4 "FUNCTION"
v L "mode" 2 442 "int32" `202 
f B "setup_adc" 2 442 "void(int32 mode)" `201 
f B "read_adc" 2 443 "int8()" `203 
v L "mode" 2 444 "int8" `205 
f G "read_adc" 2 444 "int8(int8 mode)" `204 
f G "read_adc" 2 445 "int16()" `206 
v L "mode" 2 446 "int8" `208 
f G "read_adc" 2 446 "int16(int8 mode)" `207 
f B "adc_done" 2 447 "int8()" `209  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 449 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 450 "0x10000"
d G "ADC_CLOCK_DIV_4" 2 451 "0x4000"
d G "ADC_CLOCK_DIV_8" 2 452 "0x0040"
d G "ADC_CLOCK_DIV_16" 2 453 "0x4040"
d G "ADC_CLOCK_DIV_32" 2 454 "0x0080"
d G "ADC_CLOCK_DIV_64" 2 455 "0x4080"
d G "ADC_CLOCK_INTERNAL" 2 456 "0x00c0" "Internal 2-6us"
c L "adc_done" 2 5 1 "FUNCTION"
v L "setting" 2 459 "int8" `211 
f B "setup_adc_ports" 2 459 "void(int8 setting)" `210 
v L "channel" 2 460 "int8" `213 
f B "set_adc_channel" 2 460 "void(int8 channel)" `212  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 2 462 "7" "None"
d G "ALL_ANALOG" 2 463 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 2 464 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
d G "AN0_AN1_AN2_AN3_AN4" 2 465 "2" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 2 466 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 2 467 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 2 468 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 2 469 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN2_AN3_AN4_AN5" 2 470 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 2 471 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
d G "AN0_AN1_AN4_AN5_VREF_VREF" 2 472 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN4_VREF_VREF" 2 473 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 2 474 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 2 475 "0x0E" "A0"
d G "AN0_VREF_VREF" 2 476 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 2 477 "0x1" "!old only provided for compatibility"
d G "A_ANALOG" 2 478 "0x2" "!old only provided for compatibility"
d G "A_ANALOG_RA3_REF" 2 479 "0x3" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 2 480 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 2 481 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 2 482 "0x8" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2" 2 483 "0x9" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3" 2 484 "0xA" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 2 485 "0xB" "!old only provided for compatibility"
d G "A_ANALOG_RA3_RA2_REF" 2 486 "0xC" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 2 487 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 2 488 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 2 489 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 2 492 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 493 "1"
d G "ADC_READ_ONLY" 2 494 "6"
c L "set_adc_channel" 2 5 3 "FUNCTION"
v L "x" 2 500 "sint8" `215 
f B "abs" 2 500 "sint8(sint8 x)" `214 
v L "x" 2 501 "sint16" `217 
f G "abs" 2 501 "sint16(sint16 x)" `216 
v L "x" 2 502 "sint32" `219 
f G "abs" 2 502 "sint32(sint32 x)" `218 
v L "x" 2 503 "float" `221 
f G "abs" 2 503 "float(float x)" `220 
v L "??65535" 2 504 "int8" `223 
v L "??65535" 2 504 "int8" `224 
f B "_mul" 2 504 "int16(int8 ,int8 )" `222 
v L "??65535" 2 505 "sint8" `223 
v L "??65535" 2 505 "sint8" `227 
f G "_mul" 2 505 "sint16(sint8 ,sint8 )" `225 
v L "??65535" 2 506 "int16" `223 
v L "??65535" 2 506 "int16" `230 
f G "_mul" 2 506 "int32(int16 ,int16 )" `228 
v L "??65535" 2 507 "sint16" `223 
v L "??65535" 2 507 "sint16" `233 
f G "_mul" 2 507 "sint32(sint16 ,sint16 )" `231  "Memory Manipulation Prototypes:"
v L "bank" 2 510 "int8" `235 
v L "offset" 2 510 "int8" `236 
f B "read_bank" 2 510 "int8(int8 bank,int8 offset)" `234 
v L "bank" 2 511 "int8" `238 
v L "offset" 2 511 "int8" `239 
v L "value" 2 511 "int8" `240 
f B "write_bank" 2 511 "void(int8 bank,int8 offset,int8 value)" `237 
v L "dest" 2 512 "*int8" `242 
v L "src" 2 512 "*int8" `243 
f B "strcpy" 2 512 "void(*int8 dest,*int8 src)" `241 
v L "dest" 2 513 "*int8" `245 
v L "src" 2 513 "*int8" `246 
f B "strcopy" 2 513 "void(*int8 dest,*int8 src)" `244 
v L "destination" 2 514 "*int8" `248 
v L "value" 2 514 "int8" `249 
v L "num" 2 514 "int16" `250 
f B "memset" 2 514 "void(*int8 destination,int8 value,int16 num)" `247 
v L "destination" 2 515 "*int8" `252 
v L "source" 2 515 "*int8" `253 
v L "num" 2 515 "int16" `254 
f B "memcpy" 2 515 "void(*int8 destination,*int8 source,int16 num)" `251  "String Prototypes:"
v L "cvalue" 2 518 "int8" `256 
f B "toupper" 2 518 "int8(int8 cvalue)" `255 
v L "cvalue" 2 519 "int8" `258 
f B "tolower" 2 519 "int8(int8 cvalue)" `257 
v L "string" 2 520 "*int8" `260 
v L "cstring" 2 520 "*int8" `261 
f B "sprintf" 2 520 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `259  "Data Manipulators Prototypes:"
v L "address" 2 523 "*int8" `264 
v L "bytes" 2 523 "int8" `265 
v L "value" 2 523 "int8" `266 
f B "shift_left" 2 523 "int8(*int8 address,int8 bytes,int8 value)" `263 
v L "address" 2 524 "*int8" `268 
v L "bytes" 2 524 "int8" `269 
v L "value" 2 524 "int8" `270 
f B "shift_right" 2 524 "int8(*int8 address,int8 bytes,int8 value)" `267 
v L "address" 2 525 "*int8" `272 
v L "bytes" 2 525 "int8" `273 
f B "rotate_left" 2 525 "void(*int8 address,int8 bytes)" `271 
v L "address" 2 526 "*int8" `275 
v L "bytes" 2 526 "int8" `276 
f B "rotate_right" 2 526 "void(*int8 address,int8 bytes)" `274 
v L "value" 2 527 "int8" `278 
f B "swap" 2 527 "void(int8 value)" `277 
v L "var" 2 528 "int16" `280 
v L "offset" 2 528 "int8" `281 
f B "make8" 2 528 "int8(int16 var,int8 offset)" `279 
v L "var" 2 529 "int32" `280 
v L "offset" 2 529 "int8" `284 
f G "make8" 2 529 "int8(int32 var,int8 offset)" `282 
v L "varhigh" 2 530 "int8" `286 
v L "varlow" 2 530 "int8" `287 
f B "make16" 2 530 "int16(int8 varhigh,int8 varlow)" `285 
v L "var1" 2 531 "int16" `289 
f B "make32" 2 531 "int32(int16 var1)" `288 
v L "var1" 2 532 "int16" `291 
v L "var2" 2 532 "int16" `292 
f G "make32" 2 532 "int32(int16 var1,int16 var2)" `290 
v L "var1" 2 533 "int16" `291 
v L "var2" 2 533 "int8" `295 
f G "make32" 2 533 "int32(int16 var1,int8 var2)" `293 
v L "var1" 2 534 "int16" `297 
v L "var2" 2 534 "int8" `298 
v L "var3" 2 534 "int8" `299 
f G "make32" 2 534 "int32(int16 var1,int8 var2,int8 var3)" `296 
v L "var1" 2 535 "int8" `301 
f G "make32" 2 535 "int32(int8 var1)" `300 
v L "var1" 2 536 "int8" `291 
v L "var2" 2 536 "int8" `304 
f G "make32" 2 536 "int32(int8 var1,int8 var2)" `302 
v L "var1" 2 537 "int8" `297 
v L "var2" 2 537 "int8" `298 
v L "var3" 2 537 "int8" `308 
f G "make32" 2 537 "int32(int8 var1,int8 var2,int8 var3)" `305 
v L "var1" 2 538 "int8" `310 
v L "var2" 2 538 "int8" `311 
v L "var3" 2 538 "int8" `312 
v L "var4" 2 538 "int8" `313 
f G "make32" 2 538 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `309 
v L "var1" 2 539 "int8" `291 
v L "var2" 2 539 "int16" `316 
f G "make32" 2 539 "int32(int8 var1,int16 var2)" `314 
v L "var1" 2 540 "int8" `297 
v L "var2" 2 540 "int16" `298 
v L "var3" 2 540 "int8" `320 
f G "make32" 2 540 "int32(int8 var1,int16 var2,int8 var3)" `317 
v L "var1" 2 541 "int8" `297 
v L "var2" 2 541 "int8" `298 
v L "var3" 2 541 "int16" `324 
f G "make32" 2 541 "int32(int8 var1,int8 var2,int16 var3)" `321 
v L "var" 2 542 "int8" `326 
v L "bit" 2 542 "int8" `327 
f B "bit_set" 2 542 "void(int8 var,int8 bit)" `325 
v L "var" 2 543 "int16" `326 
v L "bit" 2 543 "int8" `330 
f G "bit_set" 2 543 "void(int16 var,int8 bit)" `328 
v L "var" 2 544 "int32" `326 
v L "bit" 2 544 "int8" `333 
f G "bit_set" 2 544 "void(int32 var,int8 bit)" `331 
v L "var" 2 545 "int8" `335 
v L "bit" 2 545 "int8" `336 
f B "bit_clear" 2 545 "void(int8 var,int8 bit)" `334 
v L "var" 2 546 "int16" `335 
v L "bit" 2 546 "int8" `339 
f G "bit_clear" 2 546 "void(int16 var,int8 bit)" `337 
v L "var" 2 547 "int32" `335 
v L "bit" 2 547 "int8" `342 
f G "bit_clear" 2 547 "void(int32 var,int8 bit)" `340 
v L "var" 2 548 "int8" `344 
v L "bit" 2 548 "int8" `345 
f B "bit_test" 2 548 "int8(int8 var,int8 bit)" `343 
v L "var" 2 549 "int16" `344 
v L "bit" 2 549 "int8" `348 
f G "bit_test" 2 549 "int8(int16 var,int8 bit)" `346 
v L "var" 2 550 "int32" `344 
v L "bit" 2 550 "int8" `351 
f G "bit_test" 2 550 "int8(int32 var,int8 bit)" `349  "#use delay() Prototypes:"
v L "count" 2 553 "int8" `353 
f B "delay_cycles" 2 553 "void(int8 count)" `352 
v L "time" 2 554 "int16" `355 
f B "delay_ms" 2 554 "void(int16 time)" `354 
v L "time" 2 555 "int16" `357 
f B "delay_us" 2 555 "void(int16 time)" `356  "#use rs232() Prototypes:"
v L "cdata" 2 558 "int8" `359 
f B "putchar" 2 558 "void(int8 cdata)" `358 
v L "cdata" 2 559 "int8" `361 
v L "stream" 2 559 "int8" `362 
f G "putchar" 2 559 "void(int8 cdata,int8 stream)" `360 
v L "string" 2 560 "*int8" `364 
f B "puts" 2 560 "void(*int8 string)" `363 
v L "string" 2 561 "*int8" `366 
v L "stream" 2 561 "int8" `367 
f G "puts" 2 561 "void(*int8 string,int8 stream)" `365 
f B "getch" 2 562 "int8()" `368 
v L "stream" 2 563 "int8" `370 
f G "getch" 2 563 "int8(int8 stream)" `369 
v L "string" 2 564 "*int8" `372 
f B "gets" 2 564 "void(*int8 string)" `371 
v L "string" 2 565 "*int8" `374 
v L "stream" 2 565 "int8" `375 
f G "gets" 2 565 "void(*int8 string,int8 stream)" `373 
f B "kbhit" 2 566 "int8()" `376 
v L "stream" 2 567 "int8" `378 
f G "kbhit" 2 567 "int8(int8 stream)" `377 
v L "string" 2 568 "*int8" `380 
f B "printf" 2 568 "void(*int8 string,*int8 _VA_LIST)" `379 
v L "stream" 2 569 "int8" `383 
v L "string" 2 569 "*int8" `384 
f B "fprintf" 2 569 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `382 
f B "putc_send" 2 570 "void()" `386 
v L "stream" 2 571 "int8" `388 
f B "fputc_send" 2 571 "void(int8 stream)" `387 
f B "rcv_buffer_full" 2 572 "int8()" `389 
v L "stream" 2 573 "int8" `391 
f G "rcv_buffer_full" 2 573 "int8(int8 stream)" `390 
f B "rcv_buffer_bytes" 2 574 "int16()" `392 
v L "stream" 2 575 "int8" `394 
f G "rcv_buffer_bytes" 2 575 "int16(int8 stream)" `393 
f B "tx_buffer_full" 2 576 "int8()" `395 
v L "stream" 2 577 "int8" `397 
f G "tx_buffer_full" 2 577 "int8(int8 stream)" `396 
f B "tx_buffer_bytes" 2 578 "int16()" `398 
v L "stream" 2 579 "int8" `400 
f G "tx_buffer_bytes" 2 579 "int16(int8 stream)" `399  "#use i2c() Prototypes:"
f B "i2c_read" 2 582 "int8()" `401 
v L "stream" 2 583 "int8" `403 
f G "i2c_read" 2 583 "int8(int8 stream)" `402 
v L "stream" 2 584 "int8" `405 
v L "ack" 2 584 "int8" `406 
f G "i2c_read" 2 584 "int8(int8 stream,int8 ack)" `404 
v L "data" 2 585 "int8" `408 
f B "i2c_write" 2 585 "int8(int8 data)" `407 
v L "stream" 2 586 "int8" `410 
v L "data" 2 586 "int8" `411 
f G "i2c_write" 2 586 "int8(int8 stream,int8 data)" `409 
f B "i2c_start" 2 587 "void()" `412 
v L "stream" 2 588 "int8" `414 
f G "i2c_start" 2 588 "void(int8 stream)" `413 
v L "stream" 2 589 "int8" `416 
v L "restart" 2 589 "int8" `417 
f G "i2c_start" 2 589 "void(int8 stream,int8 restart)" `415 
f B "i2c_stop" 2 590 "void()" `418 
v L "stream" 2 591 "int8" `420 
f G "i2c_stop" 2 591 "void(int8 stream)" `419 
f B "i2c_isr_state" 2 592 "int8()" `421 
v L "addr" 2 593 "int8" `423 
f B "i2c_slaveaddr" 2 593 "void(int8 addr)" `422 
v L "stream" 2 594 "int8" `425 
v L "addr" 2 594 "int8" `426 
f G "i2c_slaveaddr" 2 594 "void(int8 stream,int8 addr)" `424 
f B "i2c_poll" 2 595 "int8()" `427 
v L "stream" 2 596 "int8" `429 
f G "i2c_poll" 2 596 "int8(int8 stream)" `428 
v L "baud" 2 597 "int32" `431 
f B "i2c_init" 2 597 "void(int32 baud)" `430 
v L "stream" 2 598 "int8" `433 
v L "baud" 2 598 "int32" `434 
f G "i2c_init" 2 598 "void(int8 stream,int32 baud)" `432  "#use spi() Prototypes:"
f B "spi_xfer" 2 601 "int8()" `435 
f G "spi_xfer" 2 602 "int16()" `436 
f G "spi_xfer" 2 603 "int32()" `437 
v L "data" 2 604 "int8" `439 
f G "spi_xfer" 2 604 "int8(int8 data)" `438 
v L "data" 2 605 "int16" `441 
f G "spi_xfer" 2 605 "int16(int16 data)" `440 
v L "data" 2 606 "int32" `443 
f G "spi_xfer" 2 606 "int32(int32 data)" `442 
v L "stream" 2 607 "int8" `445 
v L "data" 2 607 "int8" `446 
f G "spi_xfer" 2 607 "int8(int8 stream,int8 data)" `444 
v L "stream" 2 608 "int8" `445 
v L "data" 2 608 "int16" `449 
f G "spi_xfer" 2 608 "int16(int8 stream,int16 data)" `447 
v L "stream" 2 609 "int8" `445 
v L "data" 2 609 "int32" `452 
f G "spi_xfer" 2 609 "int32(int8 stream,int32 data)" `450 
v L "stream" 2 610 "int8" `454 
v L "data" 2 610 "int8" `455 
v L "bits" 2 610 "int8" `456 
f G "spi_xfer" 2 610 "int8(int8 stream,int8 data,int8 bits)" `453 
v L "stream" 2 611 "int8" `454 
v L "data" 2 611 "int16" `455 
v L "bits" 2 611 "int8" `460 
f G "spi_xfer" 2 611 "int16(int8 stream,int16 data,int8 bits)" `457 
v L "stream" 2 612 "int8" `454 
v L "data" 2 612 "int32" `455 
v L "bits" 2 612 "int8" `464 
f G "spi_xfer" 2 612 "int32(int8 stream,int32 data,int8 bits)" `461 
v L "baud" 2 613 "int32" `466 
f B "spi_init" 2 613 "void(int32 baud)" `465 
v L "stream" 2 614 "int8" `468 
v L "baud" 2 614 "int32" `469 
f G "spi_init" 2 614 "void(int8 stream,int32 baud)" `467 
v L "baud" 2 615 "int32" `471 
f B "spi_speed" 2 615 "void(int32 baud)" `470 
v L "stream" 2 616 "int8" `473 
v L "baud" 2 616 "int32" `474 
f G "spi_speed" 2 616 "void(int8 stream,int32 baud)" `472 
v L "stream" 2 617 "int8" `476 
v L "baud" 2 617 "int32" `477 
v L "clock" 2 617 "int32" `478 
f G "spi_speed" 2 617 "void(int8 stream,int32 baud,int32 clock)" `475 
v L "data" 2 618 "int8" `480 
f B "spi_prewrite" 2 618 "void(int8 data)" `479 
v L "data" 2 619 "int16" `482 
f G "spi_prewrite" 2 619 "void(int16 data)" `481 
v L "data" 2 620 "int32" `484 
f G "spi_prewrite" 2 620 "void(int32 data)" `483 
v L "??65535" 2 621 "int8" `486 
v L "data" 2 621 "int8" `487 
f G "spi_prewrite" 2 621 "void(int8 ,int8 data)" `485 
v L "??65535" 2 622 "int8" `486 
v L "data" 2 622 "int16" `490 
f G "spi_prewrite" 2 622 "void(int8 ,int16 data)" `488 
v L "??65535" 2 623 "int8" `486 
v L "data" 2 623 "int32" `493 
f G "spi_prewrite" 2 623 "void(int8 ,int32 data)" `491 
f B "spi_xfer_in" 2 624 "int8()" `494 
f G "spi_xfer_in" 2 625 "int16()" `495 
f G "spi_xfer_in" 2 626 "int32()" `496 
v L "bits" 2 627 "int8" `498 
f G "spi_xfer_in" 2 627 "int8(int8 bits)" `497 
v L "bits" 2 628 "int8" `500 
f G "spi_xfer_in" 2 628 "int16(int8 bits)" `499 
v L "bits" 2 629 "int8" `502 
f G "spi_xfer_in" 2 629 "int32(int8 bits)" `501 
v L "stream" 2 630 "int8" `504 
v L "bits" 2 630 "int8" `505 
f G "spi_xfer_in" 2 630 "int8(int8 stream,int8 bits)" `503 
v L "stream" 2 631 "int8" `504 
v L "bits" 2 631 "int8" `508 
f G "spi_xfer_in" 2 631 "int16(int8 stream,int8 bits)" `506 
v L "stream" 2 632 "int8" `504 
v L "bits" 2 632 "int8" `511 
f G "spi_xfer_in" 2 632 "int32(int8 stream,int8 bits)" `509  "#use rtos() Prototypes:"
f B "rtos_run" 2 635 "void()" `512 
f B "rtos_yield" 2 636 "void()" `513 
v L "task" 2 637 "int8" `515 
f B "rtos_enable" 2 637 "void(int8 task)" `514 
v L "task" 2 638 "int8" `517 
f B "rtos_disable" 2 638 "void(int8 task)" `516 
f B "rtos_terminate" 2 639 "void()" `518 
v L "flag" 2 640 "int8" `520 
f B "rtos_await" 2 640 "void(int8 flag)" `519 
v L "sem" 2 641 "int8" `522 
f B "rtos_wait" 2 641 "void(int8 sem)" `521 
v L "sem" 2 642 "int8" `524 
f B "rtos_signal" 2 642 "void(int8 sem)" `523 
v L "task" 2 643 "int8" `526 
v L "msg" 2 643 "int8" `527 
f B "rtos_msg_send" 2 643 "void(int8 task,int8 msg)" `525 
f B "rtos_msg_read" 2 644 "int8()" `528 
f B "rtos_msg_poll" 2 645 "int8()" `529 
v L "task" 2 646 "int8" `531 
f B "rtos_overrun" 2 646 "int8(int8 task)" `530 
v L "task" 2 647 "int8" `533 
v L "stat" 2 647 "*int8" `534 
f B "rtos_stats" 2 647 "void(int8 task,*int8 stat)" `532  "#use timer() Prototypes:"
f B "get_ticks" 2 650 "int8()" `535 
f G "get_ticks" 2 651 "int16()" `536 
f G "get_ticks" 2 652 "int32()" `537 
v L "stream" 2 653 "int8" `539 
f G "get_ticks" 2 653 "int8(int8 stream)" `538 
v L "stream" 2 654 "int8" `541 
f G "get_ticks" 2 654 "int16(int8 stream)" `540 
v L "stream" 2 655 "int8" `543 
f G "get_ticks" 2 655 "int32(int8 stream)" `542 
v L "value" 2 656 "int8" `545 
f B "set_ticks" 2 656 "void(int8 value)" `544 
v L "value" 2 657 "int16" `547 
f G "set_ticks" 2 657 "void(int16 value)" `546 
v L "value" 2 658 "int32" `549 
f G "set_ticks" 2 658 "void(int32 value)" `548 
v L "stream" 2 659 "int8" `551 
v L "value" 2 659 "int8" `552 
f G "set_ticks" 2 659 "void(int8 stream,int8 value)" `550 
v L "stream" 2 660 "int8" `551 
v L "value" 2 660 "int16" `555 
f G "set_ticks" 2 660 "void(int8 stream,int16 value)" `553 
v L "stream" 2 661 "int8" `551 
v L "value" 2 661 "int32" `558 
f G "set_ticks" 2 661 "void(int8 stream,int32 value)" `556  "#use pwm() Prototypes:"
f B "pwm_on" 2 664 "void()" `559 
v L "stream" 2 665 "int8" `561 
f G "pwm_on" 2 665 "void(int8 stream)" `560 
f B "pwm_off" 2 666 "void()" `562 
v L "stream" 2 667 "int8" `564 
f G "pwm_off" 2 667 "void(int8 stream)" `563 
v L "duty" 2 668 "int16" `566 
f B "pwm_set_duty" 2 668 "void(int16 duty)" `565 
v L "stream" 2 669 "int8" `568 
v L "duty" 2 669 "int16" `569 
f G "pwm_set_duty" 2 669 "void(int8 stream,int16 duty)" `567 
v L "percent" 2 670 "int16" `571 
f B "pwm_set_duty_percent" 2 670 "void(int16 percent)" `570 
v L "stream" 2 671 "int8" `573 
v L "percent" 2 671 "int16" `574 
f G "pwm_set_duty_percent" 2 671 "void(int8 stream,int16 percent)" `572 
v L "frequency" 2 672 "int32" `576 
f B "pwm_set_frequency" 2 672 "void(int32 frequency)" `575 
v L "stream" 2 673 "int8" `578 
v L "frequency" 2 673 "int32" `579 
f G "pwm_set_frequency" 2 673 "void(int8 stream,int32 frequency)" `577  "#use capture() Prototypes:"
f B "get_capture_time" 2 676 "int16()" `580 
v L "stream" 2 677 "int8" `582 
f G "get_capture_time" 2 677 "int16(int8 stream)" `581 
f B "get_capture_event" 2 678 "int8()" `583 
v L "stream" 2 679 "int8" `585 
f G "get_capture_event" 2 679 "int8(int8 stream)" `584  "Enviroment Prototypes:"
c L "get_capture_event" 2 5 2 "FUNCTION"
v L "address" 2 692 "int16" `587 
f B "goto_address" 2 692 "void(int16 address)" `586 
v L "label" 2 693 "int16" `589 
f B "label_address" 2 693 "int16(int16 label)" `588  "Program Memory Prototypes:"
v L "address" 2 696 "int16" `591 
v L "dataptr" 2 696 "*int8" `592 
v L "count" 2 696 "int16" `593 
f B "read_program_memory" 2 696 "void(int16 address,*int8 dataptr,int16 count)" `590 
v L "address" 2 697 "int16" `595 
f B "read_program_eeprom" 2 697 "int16(int16 address)" `594 
v L "address" 2 698 "int16" `597 
f B "erase_program_eeprom" 2 698 "void(int16 address)" `596 
v L "address" 2 699 "int16" `599 
v L "dataptr" 2 699 "*int8" `600 
v L "count" 2 699 "int16" `601 
f B "write_program_memory" 2 699 "void(int16 address,*int8 dataptr,int16 count)" `598 
v L "address" 2 700 "int16" `603 
v L "data" 2 700 "int16" `604 
f B "write_program_eeprom" 2 700 "void(int16 address,int16 data)" `602  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 705 "int16" `605 
v L "address" 2 710 "__EEADDRESS__" `607 
f B "read_eeprom" 2 710 "int8(__EEADDRESS__ address)" `606 
v L "address" 2 711 "__EEADDRESS__" `609 
v L "value" 2 711 "int8" `610 
f B "write_eeprom" 2 711 "void(__EEADDRESS__ address,int8 value)" `608  "INT"
c L "write_eeprom" 2 5 4 "FUNCTION"
v L "interrupt" 2 718 "int32" `612 
f B "enable_interrupts" 2 718 "void(int32 interrupt)" `611 
v L "interrupt" 2 719 "int32" `614 
f B "disable_interrupts" 2 719 "void(int32 interrupt)" `613 
v L "interrupt" 2 720 "int32" `616 
f B "clear_interrupt" 2 720 "void(int32 interrupt)" `615 
v L "interrupt" 2 721 "int32" `618 
f B "interrupt_active" 2 721 "int8(int32 interrupt)" `617 
v L "source" 2 722 "int8" `620 
v L "edge" 2 722 "int8" `621 
f B "ext_int_edge" 2 722 "void(int8 source,int8 edge)" `619 
v L "address" 2 723 "int16" `623 
f B "jump_to_irs" 2 723 "void(int16 address)" `622  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 725 "0x40"
d G "H_TO_L" 2 726 "0"
d G "GLOBAL" 2 728 "0xF2C0"
d G "PERIPH" 2 729 "0xF240"
d G "INT_RTCC" 2 730 "0x00F220"
d G "INT_TIMER0" 2 731 "0x00F220"
d G "INT_TIMER1" 2 732 "0x009D01"
d G "INT_TIMER2" 2 733 "0x009D02"
d G "INT_TIMER3" 2 734 "0x00A002"
d G "INT_EXT_L2H" 2 735 "0x5000F210"
d G "INT_EXT_H2L" 2 736 "0x6000F210"
d G "INT_EXT" 2 737 "0x00F210"
d G "INT_EXT1_L2H" 2 738 "0x5001F008"
d G "INT_EXT1_H2L" 2 739 "0x6001F008"
d G "INT_EXT1" 2 740 "0x00F008"
d G "INT_EXT2_L2H" 2 741 "0x5002F010"
d G "INT_EXT2_H2L" 2 742 "0x6002F010"
d G "INT_EXT2" 2 743 "0x00F010"
d G "INT_RB" 2 744 "0x00FFF208"
d G "INT_PSP" 2 745 "0x009D80"
d G "INT_AD" 2 746 "0x009D40"
d G "INT_RDA" 2 747 "0x009D20"
d G "INT_TBE" 2 748 "0x009D10"
d G "INT_SSP" 2 749 "0x009D08"
d G "INT_CCP1" 2 750 "0x009D04"
d G "INT_CCP2" 2 751 "0x00A001"
d G "INT_BUSCOL" 2 752 "0x00A008"
d G "INT_LOWVOLT" 2 753 "0x00A004"
d G "INT_CANIRX" 2 754 "0x00A380"
d G "INT_CANWAKE" 2 755 "0x00A340"
d G "INT_CANERR" 2 756 "0x00A320"
d G "INT_COMP" 2 757 "0x00A040"
d G "INT_EEPROM" 2 758 "0x00A010"
d G "INT_CANTX2" 2 759 "0x00A310"
d G "INT_CANTX1" 2 760 "0x00A308"
d G "INT_CANTX0" 2 761 "0x00A304"
d G "INT_CANRX1" 2 762 "0x00A302"
d G "INT_CANRX0" 2 763 "0x00A301"
C L "jump_to_irs" 1 10 1 "FUNCTION"
F G "lecture" 0 5 "int32()" `632 
F G "dist" 0 6 "int32()" `633 
F G "main" 0 10 "void()" `634 
C L "main" 0 14 1 "FUNCTION"
C L "main" 0 14 1 "FUNCTION"
C L "main" 0 14 1 "FUNCTION"
C L "main" 0 14 1 "FUNCTION"
V L "distance" 0 25 "int32" `637 
C L "main" 0 14 1 "FUNCTION"
C L "main" 0 14 1 "FUNCTION"
C L "main" 0 14 1 "FUNCTION"
C L "main" 0 14 1 "FUNCTION"
C L "main" 0 14 1 "FUNCTION"
C L "main" 0 14 1 "FUNCTION"
F G "dist" 0 44 "int32()" `633 
V L "time" 0 45 "float" `638 
V L "distance" 0 46 "int32" `639 
C L "dist" 0 14 1 "FUNCTION"
C L "dist" 0 14 1 "FUNCTION"
C L "dist" 0 14 1 "FUNCTION"
C L "dist" 0 14 1 "FUNCTION"
C L "dist" 0 14 1 "FUNCTION"
C L "dist" 0 14 1 "FUNCTION"
C L "dist" 0 14 2 "FUNCTION"
C L "dist" 0 14 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
